//Áªô‰Ω†‰∏§‰∏™ ÈùûÁ©∫ ÈìæË°®Êù•‰ª£Ë°®‰∏§‰∏™ÈùûË¥üÊï¥Êï∞„ÄÇÊï∞Â≠óÊúÄÈ´ò‰Ωç‰Ωç‰∫éÈìæË°®ÂºÄÂßã‰ΩçÁΩÆ„ÄÇÂÆÉ‰ª¨ÁöÑÊØè‰∏™ËäÇÁÇπÂè™Â≠òÂÇ®‰∏Ä‰ΩçÊï∞Â≠ó„ÄÇÂ∞ÜËøô‰∏§Êï∞Áõ∏Âä†‰ºöËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÈìæË°®„ÄÇ 
//
// ‰Ω†ÂèØ‰ª•ÂÅáËÆæÈô§‰∫ÜÊï∞Â≠ó 0 ‰πãÂ§ñÔºåËøô‰∏§‰∏™Êï∞Â≠óÈÉΩ‰∏ç‰ºö‰ª•Èõ∂ÂºÄÂ§¥„ÄÇ 
//
// 
//
// ËøõÈò∂Ôºö 
//
// Â¶ÇÊûúËæìÂÖ•ÈìæË°®‰∏çËÉΩ‰øÆÊîπËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÔºüÊç¢Âè•ËØùËØ¥Ôºå‰Ω†‰∏çËÉΩÂØπÂàóË°®‰∏≠ÁöÑËäÇÁÇπËøõË°åÁøªËΩ¨„ÄÇ 
//
// 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
//ËæìÂá∫Ôºö7 -> 8 -> 0 -> 7
// 
// Related Topics ÈìæË°® 
// üëç 370 üëé 0


package leetcode.editor.cn;

import ADataStructure.A2LinkedList.ListNode;

import java.util.ArrayDeque;
import java.util.Stack;

//JavaÔºö‰∏§Êï∞Áõ∏Âä† II
public class P445_AddTwoNumbersIi {
    public static void main(String[] args) {
        Solution solution = new P445_AddTwoNumbersIi ().new Solution();
        // TO TEST
    }
    //leetcode submit region begin(Prohibit modification and deletion)
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     *     int val;
     *     ListNode next;
     *     ListNode() {}
     *     ListNode(int val) { this.val = val; }
     *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            Stack<Integer> stack1 = valstack(l1);
            Stack<Integer> stack2 = valstack(l2);
            ListNode head = new ListNode(-1);
            int carry = 0;
            while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {
                int x = stack1.isEmpty() ? 0 : stack1.pop();
                int y = stack2.isEmpty() ? 0 : stack2.pop();
                int sum = x + y + carry;
                ListNode node = new ListNode(sum % 10);
                carry = sum / 10;
                //Â§¥ÊèíÊ≥ïÊñ∞Âª∫ÈìæË°®
                node.next = head.next;
                head.next = node;
            }
            return head.next;
        }

        private Stack<Integer> valstack(ListNode l) {
            Stack<Integer> stack = new Stack<>();
            while (l != null) {
                stack.add(l.val);
                l = l.next;
            }
            return stack;
        }

    }
//leetcode submit region end(Prohibit modification and deletion)

}

